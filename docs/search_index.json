[["index.html", "Exploración y manipulación de datos con R Motivación", " Exploración y manipulación de datos con R Motivación “Una de las cosas más importantes que puedes hacer es dedicar un tiempo para aprender un lenguaje de programación. Aprender a programar es como aprender otro idioma: requiere tiempo y entrenamiento, y no hay resultados prácticos inmediatos. Pero si superas esa primera subida empinada de la curva de aprendizaje, las ganancias como científico son enormes. Programar no sólo te liberará de la camisa de fuerza de los softwares estadísticos cerrados, sino que también agudizará tus habilidades analíticas y ampliará los horizontes de modelado ecológico y estadístico.” ~ Adaptación de (Ellison and Gotelli 2004) ~ Podríamos resumir nuestro trabajo como científicos, desde la recolección de datos en el campo, hasta su divulgación a través del siguiente esquema: ~ Adaptación de “R for Data Science” (Wickham and Grolemund 2016) ~ Objetivos El curso pretende proveer herramientas de programación básicas para llevar adelante el proceso de investigación tomando como base el esquema de trabajo anterior. Para ello, usaremos datos (reales o simulados) típicos del área de Ciencias Agrarias. Importante: i) no es un curso de estadística; ii) entendemos la programación como un simple medio para optimizar nuestra labor cotidiana (no como un fin mismo), al final del día seguiremos siendo fitopatólogos, fisiólogos, bioquímicos, etc.; iii) maximizaremos la adopción de la filosofía tidyverse; y iv) obtendrán mayor provecho aquellas personas que se inician en R, ya que los contenidos pretenden ser de baja complejidad, posibilitando profundizar el conocimiento por los propios medios del alumno. ¿Por qué R? (R Core Team 2017) 1 Software libre - multiplataforma 2 Aprender un lenguaje de programación: ejercicio mental/lógica (Aprender estadística resulta mucho mas ameno) 3 Software actualizado y con una amplia gama de paquetes específicos (drc, agricolae, epiphy…) 4 Gran flexibilidad y elegancia de los gráficos 5 Popularidad - Comunidad activa y creciente dispuesta a ayudar (aprendemos a usar terminos técnicos de ciencia de datos en inglés) 6 Programar ya no es sólo computación (CV/relevant skills) References "],["config.html", "1 Configuraciones básicas Paquetes de R Workflow componentes", " 1 Configuraciones básicas Instalación de programas 1° R 2° R Studio (bajar la versión Free) RStudio es un entorno de desarrollo integrado (IDE) para el lenguaje de programación R, o sea es la interface por medio de la cual se ejecutan acciones en R. Configuraciones iniciales (sugeridas). Dirigirse a la sección “Tools/Global options” Paquetes de R Un paquete es una colección de funciones, datos y código R que se almacenan en una carpeta conforme a una estructura bien definida, fácilmente accesible para R. Un repositorio es un lugar donde se alojan los paquetes para que pueda instalarlos desde él. Los repositorios mas populares son: CRAN: repositorio oficial. Es una red de servidores web mantenida por la comunidad R en todo el mundo. El Core Team de R lo coordina, y para que un paquete se publique aquí, debe pasar varias pruebas que aseguren el cumplimiento de las políticas de CRAN. GITHUB: probablemente el repositorio más popular para proyectos particulares de código abierto. No es específico de R (sin proceso de revisión asociado). Bioconductor: repositorio destinado a software de código abierto para bioinformática. Como CRAN, tiene sus propios procesos de presentación y revisión, y su comunidad es muy activa y tiene varias conferencias y reuniones al año. La simple instalación de R trae consigo múltiples paquetes que permiten un funcionamiento básico de importación de datos, ajuste y evaluación de modelos estadísticos y representaciones gráficas. Sin embargo, la enorme potencia de R deriva de su capacidad de incorporar nuevas funciones generadas por su gran comunidad de usuarios En la web de R se puede consultar la lista de paquetes disponibles, y en la sección Task Views se puede consultar los mismos ordenados por áreas de aplicación. Links para exploración o chequeo de novedades de paquetes: Rdocumentation METACRAN r weekly r-bloggers revolution analytics RStudio blog Existen varias vias de instalación de paquetes: Via consola: install.packages(\"nombre_del_paquete\") O simplemente en el panel de paquetes. Una vez instalado, hay que cargar los paquetes que contienen las funciones que vayamos a usar en cada sesión library(nombre-del-paquete) instale el paquete pacman y activelo Workflow componentes Varios tipos de archivos serán creados y usados durante una sesión de R: datos crudos (hojas de cálculo) - datos manipulados scripts gráficos reportes de resultados Una análisis debe poder ser retomado en cualquier momento pudiendo darse por concluída cuando el trabajo es publicado. Hasta entonces debemos tener rápido acceso a todos los objetos creados en sesiones anteriores. Para ello debemos manejarnos siempre bajo buenas prácticas de trabajo. Esto nos permitirá entender qué quisimos hacer tiempo atrás, seremos intuitivos para encontrar archivos/objetos, y finalmente crearemos trabajos reproducibles… Una forma práctica de administrar todos los objetos de una sesión es por medio del uso de “proyectos” de R Studio. Estructura típica de un proyecto de Rstudio. Es aconsejable ser consistente en la nomenclatura de todos los objetos generados en nuestras sesiones de trabajo (archivos, carpetas, etc.). Crear una nuevo proyecto llamado “R_intro” Crear un script “dia_1” ¿Dónde se guardaría el siguiente gráfico? En este ejemplo, usaremos una función “plot()” y un dataset “pressure” prediseñados en paquetes de carga automática al iniciar R. plot(pressure) "],["sintaxis.html", "2 Sintaxis R Calculadora Comparaciones lógicas Variables y asignaciones Funciones Tips S.O.S. Tablas resumen", " 2 Sintaxis R Calculadora 4 + 9 4 - 3 * 1 #4%1 (4 + 5 ) * 7 - (36/18)^3 Ver tablas resumen de operadores aritméticos y lógicos (al final del capítulo) Reto matemático que se volvió viral en las redes sociales* Existen dos soluciones, según método que se aplique: el PEMDAS = 1 (parenthesis &lt; exponents &lt; multiplicación &lt; division &lt; addition &lt; subtraction) y el BODMAS = 16 (Brackets &lt; Orders (Powers and Square Roots) &lt; Division &lt; Multiplication &lt; Addition &lt; Subtraction). Cómo opera R? Se puede decir que hay diferencia de estilos al programar. Se deberia tener presente que otros pueden leer tu código (optar por buenas prácticas) (3+(5*(2^2))) # difícil de leer 3 + 5 * 2 ^ 2 # si se recuerdan las reglas, todo bien 3 + 5 * (2 ^ 2) # si se olvidan algunas reglas, esto podría ayudar Comparaciones lógicas 4&gt;3 4 == 4 4 == 4 4 != 3 1 &gt;= -9 Variables y asignaciones Podemos almacenar valores en variables usando el operador de asignación &lt;-, veamos un ejemplo: x &lt;- 1/40 Esta asignación no muestra el valor, sino que lo almacena para más adelante en algo llamado “variable”. Que contiene x? x shortcut de “&lt;-” : Alt - Chequear la pestaña Environment en uno de los paneles de RStudio. Nuestra variable x se puede usar en lugar de un número en cualquier cálculo que espere un número: x &lt;- x + 1 # observen cómo RStudio actualiza/sobrescribe x en la pestaña superior derecha y &lt;- x * 2 El lado derecho de la asignación puede ser cualquier expresión de R válida. La expresión del lado derecho se evalúa por completo antes de que se realice la asignación. También es posible utilizar el operador = para la asignación x = 1/40 Esta forma es menos común entre los usuarios R (se recomienda usar &lt;-). Funciones Como dijimos, los paquetes son básicamente un conjunto de funciones generadas por los autores de los mismos pero el usuario puede crear sus propias funciones. Componentes de las funciones: nombre_funcion(argumentos) Nombre: Generalmente, el nombre es intuitivo, por ejemplo, mean es la función que calcula la media, round es la funión que redondea un número.(Como habrán notado R está en inglés) Argumentos: Un argumento es un marcador de posición. Cuando se invoca una función, se debe indicar valores a los argumentos. Los argumentos son opcionales; es decir, una función puede no contener argumentos. También los argumentos pueden tener valores por defecto. Algunos cálculos basados en funciones matemáticas. Son las mas simples, y no esta funcion no contienen argumentos. [para chequear la info de la función, solo basta con seleccionar todos sus caracteres + F1] sqrt(3) # 3^0.5 # 3^(1/2) log(10) # logaritmo natural exp(2.302585) # log(10, base=10) Funciones básicas pero con argumentos Redondeo round(4.3478) round(4.3478, digits=3) Tips 1 - No se tienen en cuenta los espacios en blanco entre palabras: podemos o no dejar espacios para que el código se pueda ordenar de forma adecuada y poder entenderse. plot( pressure ) plot(pressur e) 2 - Se distinguen las mayúsculas y minúsculas (“case sensitive”): para variables en el código, podemos crear diferentes variables con nombres iguales pero alternando mayúsculas y minúsculas. Plot(pressure) 3 - Se pueden incluir comentarios: como vimos anteriormente los comentarios se utilizan para añadir información en el código. De paso observamos que plot(pressur e) # da error # grafico press vs temp plot(pressure) Aprovechemos a ir describiendo los “argumentos” de las “funciones”: plot(pressure, # grafico press vs temp pch = 19, # cambio el tipo de puntos vacios a puntos llenos col= &quot;blue&quot; # uso color azul para rellenarlos ) 4 - El punto y coma (;) actúa como separador de comandos aún en la misma línea del script! pressure; plot(pressure) 5 - Los nombres de las variables pueden contener letras, números, guiones bajos y puntos, pero NO PUEDEN: comenzar con un número contener espacios en absoluto Cada uno adopta su propia forma para nombres largos de variables, por ej: puntos.entre.palabras guiones_bajos_entre_palabras MayúsculasMinúsculasParaSepararPalabras No importa como lo adopten, pero es aconsejable ser consistente. S.O.S. En el mismo R: ?sd; ??sd; F1 sobre la función Googlear: r generate a sequence of uppercase letters Stack Overflow en inglés / Stack Overflow en español / RStudio: comunidades altamente activas por los usuarios de R y otros lenguajes de programación. R Mailing Lists: especificas de cada área de la ciencia. ¿Cómo hacer una buena pregunta en las comunidades? Ser conciso pero gentil… Ser reproducible: su código debe correr en cualquier máquina. La comunidad no irá a ayudarle si no pueden reproducir su error (detallar paquetes y versión de R en caso necesario) Tablas resumen Table 2.1: Operadores aritméticos Operador Detalle x + y Suma de x e y x - y Resta de x menos y x * y Multiplicación x / y División de x por y x %/% y Parte entera de la división de x por y x %% y Resto de la división de x por y x ^ y x elevado a y-ésima potencia (equivalente a **) Table 2.2: Operadores lógicos Operador Prueba.lógica x &lt; y x menor que y? x &lt;= y x menor o igual que y? x &gt; y x mayor que y? x &gt;= y x mayor o igual que y? x == y x igual que y? x != y x diferente que y? Table 2.3: Funciones matemáticas Operador Detalle sqrt(x) raiz de x exp(y) exponencial de y log(x) logaritmo natural de x = ln log10(x) logaritmo base 10 de x sum(x) suma todos los elementos de x prod(x) producto de todos los elementos de x round(x, n) redondea x a n-digitos Table 2.4: Algunos atajos comúnmente usados Teclas Detalle Alt+Shift+K panel de todos los atajos Ctrl+Z / Ctrl+Shift+Z undo/redo Alt+ - &lt;- Ctrl+r corre la línea/bloque completa de código Ctrl+l limpia la consola Ctrl+Shift+c silencia la línea de código Ctrl+Shift+d duplica la línea de código Ctrl+i indexa el bloque de código Ver todos los atajos en R Studio Ctrl | Shift | k "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
